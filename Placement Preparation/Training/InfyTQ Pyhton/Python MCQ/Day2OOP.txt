1. What will be the output of the following Python code?

>>> class demo():
	def __repr__(self):
		return '__repr__ built-in function called'
	def __str__(self):
		return '__str__  built-in function called'
>>> s=demo()
>>> print(s)
a) __str__ called
b) __repr__ called
c) Error
d) Nothing is printed
View Answer

Answer: a
Explanation: __str__ is used for producing a string representation of an object’s value that is most readable for humans. Execute in python shell to verify.
2. What is hasattr(obj,name) used for?
a) To access the attribute of the object
b) To delete an attribute
c) To check if an attribute exists or not
d) To set an attribute
View Answer

Answer: c
Explanation: hasattr(obj,name) checks if an attribute exists or not and returns True or False.
3. What will be the output of the following Python code?

class stud:
   def __init__(self, roll_no, grade):
      self.roll_no = roll_no
      self.grade = grade
   def display (self):
      print("Roll no : ", self.roll_no,  ", Grade: ", self.grade)
stud1 = stud(34, ‘S’)
stud1.age=7
print(hasattr(stud1, 'age'))
a) Error as age isn’t defined
b) True
c) False
d) 7
View Answer

Answer: a
Explanation: Execute in python shell to verify.
4. What is delattr(obj,name) used for?
a) To print deleted attribute
b) To delete an attribute
c) To check if an attribute is deleted or not
d) To set an attribute
View Answer

Answer: b
Explanation: delattr(obj,name) deletes an attribute in a class.
5. __del__ method is used to destroy instances of a class.
a) True
b) False
View Answer

Answer: a
Explanation: ___del__ method acts as a destructor and is used to destroy objects of classes.
6. What will be the output of the following Python code?

class student:
   ‘Base class for all students’
   def __init__(self, roll_no, grade):
      self.roll_no = roll_no
      self.grade = grade
   def display (self):
      print("Roll no : ", self.roll_no,  ", Grade: ", self.grade)
print(student.__doc__)
a) Exception is thrown
b) __main__
c) Nothing is displayed
d) Base class for all students
View Answer

Answer: d
Explanation: ___doc__ built-in class attribute is used to print the class documentation string or none, if undefined.
7. What does print(Test.__name__) display (assuming Test is the name of the class)?
a) ()
b) Exception is thrown
c) Test
d) __main__
View Answer

Answer: c
Explanation: __name__ built-in class attribute is used to display the class name.

8. Suppose B is a subclass of A, to invoke the __init__ method in A from B, what is the line of code you should write?
a) A.__init__(self)
b) B.__init__(self)
c) A.__init__(B)
d) B.__init__(A)
View Answer

Answer: a
Explanation: To invoke the __init__ method in A from B, either of the following should be written: A.__init__(self) or super().__init__(self).
9. What will be the output of the following Python code?

class Test:
    def __init__(self):
        self.x = 0
class Derived_Test(Test):
    def __init__(self):
        Test.__init__(self)
        self.y = 1
def main():
    b = Derived_Test()
    print(b.x,b.y)
main()
a) Error because class B inherits A but variable x isn’t inherited
b) 0 0
c) 0 1
d) Error, the syntax of the invoking method is wrong
View Answer

Answer: c
Explanation: Since the invoking method has been properly invoked, variable x from the main class has been properly inherited and it can also be accessed.
10. What will be the output of the following Python code?

class A:
    def __init__(self, x= 1):
        self.x = x
class der(A):
    def __init__(self,y = 2):
        super().__init__()
        self.y = y
def main():
    obj = der()
    print(obj.x, obj.y)
main()
a) Error, the syntax of the invoking method is wrong
b) The program runs fine but nothing is printed
c) 1 0
d) 1 2
View Answer

Answer: d
Explanation: In the above piece of code, the invoking method has been properly implemented and hence x=1 and y=2.
11. What does built-in function type do in context of classes?
a) Determines the object name of any value
b) Determines the class name of any value
c) Determines class description of any value
d) Determines the file name of any value
View Answer

Answer: b
Explanation: For example: >>> type((1,)) gives <class ‘tuple’>.
12. Which of the following is not a type of inheritance?
a) Double-level
b) Multi-level
c) Single-level
d) Multiple
View Answer

Answer: a
Explanation: Multiple, multi-level, single-level and hierarchical inheritance are all types of inheritance.
13. What does built-in function help do in context of classes?
a) Determines the object name of any value
b) Determines the class identifiers of any value
c) Determines class description of any built-in type
d) Determines class description of any user-defined built-in type
View Answer

Answer: c
Explanation: help() usually gives information of the class on any built-in type or function.
14. What will be the output of the following Python code?

class A:
    def one(self):
        return self.two()
 
    def two(self):
        return 'A'
 
class B(A):
    def two(self):
        return 'B'
obj1=A()
obj2=B()
print(obj1.two(),obj2.two())
a) A A
b) A B
c) B B
d) An exception is thrown
View Answer

Answer: b
Explanation: obj1.two() invokes the method two() in class A which returns ‘A’ and obj2.two() invokes the method two() in class B which returns ‘B’.
15. What type of inheritance is illustrated in the following Python code?

class A():
    pass
class B():
    pass
class C(A,B):
    pass
a) Multi-level inheritance
b) Multiple inheritance
c) Hierarchical inheritance
d) Single-level inheritance
View Answer

Answer: b
Explanation: In multiple inheritance, two or more subclasses are derived from the superclass as shown in the above piece of code.
16. Which of the following best describes inheritance?
a) Ability of a class to derive members of another class as a part of its own definition
b) Means of bundling instance variables and methods in order to restrict access to certain class members
c) Focuses on variables and passing of variables to functions
d) Allows for implementation of elegant software that is well designed and easily modified
View Answer

Answer: a
Explanation: If the class definition is class B(A): then class B inherits the methods of class A. This is called inheritance.
17. Which of the following statements is wrong about inheritance?
a) Protected members of a class can be inherited
b) The inheriting class is called a subclass
c) Private members of a class can be inherited and accessed
d) Inheritance is one of the features of OOP
View Answer C

18. What will be the output of the following Python code?

class Demo:
    def __new__(self):
        self.__init__(self)
        print("Demo's __new__() invoked")
    def __init__(self):
        print("Demo's __init__() invoked")
class Derived_Demo(Demo):
    def __new__(self):
        print("Derived_Demo's __new__() invoked")
    def __init__(self):
        print("Derived_Demo's __init__() invoked")
def main():
    obj1 = Derived_Demo()
    obj2 = Demo()
main()
a)

Derived_Demo’s __init__() invoked
Derived_Demo's __new__() invoked
Demo's __init__() invoked
Demo's __new__() invoked
b)

Derived_Demo's __new__() invoked
Demo's __init__() invoked
Demo's __new__() invoked
c)

Derived_Demo's __new__() invoked
Demo's __new__() invoked
d)

Derived_Demo’s __init__() invoked
Demo's __init__() invoked
View Answer
Answer: b
Explanation: Since the object for the derived class is declared first, __new__() method of the derived class is invoked first, followed by the constructor and the __new__() method of main class.
 
 
19. What will be the output of the following Python code?

class Test:
    def __init__(self):
        self.x = 0
class Derived_Test(Test):
    def __init__(self):
        self.y = 1
def main():
    b = Derived_Test()
    print(b.x,b.y)
main()
a) 0 1
b) 0 0
c) Error because class B inherits A but variable x isn’t inherited
d) Error because when object is created, argument must be passed like Derived_Test(1)
View Answer

Answer: c
Explanation: Since the invoking method, Test.__init__(self), isn’t present in the derived class, variable x can’t be inherited.
20. What will be the output of the following Python code?

class A():
    def disp(self):
        print("A disp()")
class B(A):
    pass
obj = B()
obj.disp()
a) Invalid syntax for inheritance
b) Error because when object is created, argument must be passed
c) Nothing is printed
d) A disp()
View Answer

Answer: d
Explanation: Class B inherits class A hence the function disp () becomes part of class B’s definition. Hence disp() method is properly executed and the line is printed.
